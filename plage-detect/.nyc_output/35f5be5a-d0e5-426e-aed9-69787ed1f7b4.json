{"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\DetectorFactory\\JSDetectorFactory.ts":{"path":"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\DetectorFactory\\JSDetectorFactory.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":21},"end":{"line":6,"column":77}},"4":{"start":{"line":7,"column":23},"end":{"line":7,"column":83}},"5":{"start":{"line":8,"column":23},"end":{"line":8,"column":81}},"6":{"start":{"line":12,"column":39},"end":{"line":28,"column":3}},"7":{"start":{"line":16,"column":4},"end":{"line":18,"column":6}},"8":{"start":{"line":17,"column":8},"end":{"line":17,"column":46}},"9":{"start":{"line":20,"column":4},"end":{"line":22,"column":6}},"10":{"start":{"line":21,"column":8},"end":{"line":21,"column":53}},"11":{"start":{"line":24,"column":4},"end":{"line":26,"column":6}},"12":{"start":{"line":25,"column":8},"end":{"line":25,"column":98}},"13":{"start":{"line":27,"column":4},"end":{"line":27,"column":29}},"14":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":39},"end":{"line":12,"column":40}},"loc":{"start":{"line":12,"column":51},"end":{"line":28,"column":1}},"line":12},"2":{"name":"JSDetectorFactory","decl":{"start":{"line":13,"column":13},"end":{"line":13,"column":30}},"loc":{"start":{"line":13,"column":33},"end":{"line":14,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":16,"column":53},"end":{"line":16,"column":54}},"loc":{"start":{"line":16,"column":65},"end":{"line":18,"column":5}},"line":16},"4":{"name":"(anonymous_4)","decl":{"start":{"line":20,"column":51},"end":{"line":20,"column":52}},"loc":{"start":{"line":20,"column":72},"end":{"line":22,"column":5}},"line":20},"5":{"name":"(anonymous_5)","decl":{"start":{"line":24,"column":51},"end":{"line":24,"column":52}},"loc":{"start":{"line":24,"column":115},"end":{"line":26,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":39,"9":1,"10":64,"11":1,"12":32,"13":1,"14":1},"f":{"0":3,"1":1,"2":1,"3":39,"4":64,"5":32},"b":{"0":[1,1,1],"1":[3,0],"2":[3,3]},"inputSourceMap":{"version":3,"file":"C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/DetectorFactory/JSDetectorFactory.ts","sources":["C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/DetectorFactory/JSDetectorFactory.ts"],"names":[],"mappings":";;;;;AAAA,8EAAwD;AACxD,oFAA8D;AAC9D,kFAA4D;AAK5D;;GAEG;AACH;IAAA;IAaA,CAAC;IAZG,iDAAiD;IACjD,8CAAkB,GAAlB;QACI,OAAO,IAAI,wBAAc,EAAE,CAAC;IAChC,CAAC;IACD,mDAAmD;IACnD,4CAAgB,GAAhB,UAAiB,SAAwB;QACrC,OAAO,IAAI,sBAAY,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IACD,qDAAqD;IACrD,4CAAgB,GAAhB,UAAiB,WAA8B,EAAE,WAA8B,EAAE,YAA2B,EAAE,YAA2B;QACrI,OAAO,IAAI,wBAAc,CAAC,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;IACpF,CAAC;IACL,wBAAC;AAAD,CAAC,AAbD,IAaC;AAED,kBAAe,iBAAiB,CAAC","sourcesContent":["import ASTGenerator from \"../ASTGenerator/ASTGenerator\";\r\nimport FilePathGetter from \"../FilePathGetter/FilePathGetter\";\r\nimport JSPlagDetector from \"../PlagDetector/JSPlagDetector\";\r\nimport { SubmissionCode, SubmissionMap } from \"../Types/PlagResultType\";\r\nimport IDetectorFactory from \"./IDetectorFactory\";\r\nimport * as babel from \"@babel/core\"\r\n\r\n/**\r\n * Class implements IDetectorFactory interface for Javascript.\r\n */\r\nclass JSDetectorFactory implements IDetectorFactory {\r\n    // Method to create instance of PathGetter object\r\n    makeFilePathGetter(): FilePathGetter {\r\n        return new FilePathGetter();\r\n    }\r\n    // Method to create instance of ASTGenerator object\r\n    makeASTGenerator(filePaths: Array<string>): ASTGenerator {\r\n        return new ASTGenerator(filePaths);\r\n    }\r\n    // Method to create instance of JSPlagDetector object\r\n    makePlagDetector(submission1: Array<babel.Node>, submission2: Array<babel.Node>, file1NameMap: SubmissionMap, file2NameMap: SubmissionMap): JSPlagDetector {\r\n        return new JSPlagDetector(submission1, submission2, file1NameMap, file2NameMap);\r\n    }\r\n}\r\n\r\nexport default JSDetectorFactory;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"46b87d28449c6c39f06f37af54c4c0368aa77fde","contentHash":"ce9f81d44e74acaaa4ae694119f7862e6911ca15b6434af063b9c5a6d94d106a"},"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\ASTGenerator\\ASTGenerator.ts":{"path":"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\ASTGenerator\\ASTGenerator.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":72}},"10":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"11":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"13":{"start":{"line":15,"column":31},"end":{"line":15,"column":42}},"14":{"start":{"line":16,"column":17},"end":{"line":16,"column":19}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"16":{"start":{"line":17,"column":21},"end":{"line":17,"column":141}},"17":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"18":{"start":{"line":17,"column":109},"end":{"line":17,"column":141}},"19":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"20":{"start":{"line":19,"column":4},"end":{"line":19,"column":18}},"21":{"start":{"line":21,"column":0},"end":{"line":21,"column":62}},"22":{"start":{"line":22,"column":12},"end":{"line":22,"column":48}},"23":{"start":{"line":23,"column":9},"end":{"line":23,"column":22}},"24":{"start":{"line":28,"column":34},"end":{"line":58,"column":3}},"25":{"start":{"line":30,"column":8},"end":{"line":30,"column":26}},"26":{"start":{"line":31,"column":8},"end":{"line":31,"column":35}},"27":{"start":{"line":32,"column":8},"end":{"line":32,"column":35}},"28":{"start":{"line":35,"column":4},"end":{"line":48,"column":6}},"29":{"start":{"line":36,"column":20},"end":{"line":36,"column":24}},"30":{"start":{"line":37,"column":20},"end":{"line":37,"column":22}},"31":{"start":{"line":38,"column":22},"end":{"line":38,"column":23}},"32":{"start":{"line":39,"column":8},"end":{"line":46,"column":11}},"33":{"start":{"line":40,"column":26},"end":{"line":40,"column":68}},"34":{"start":{"line":41,"column":12},"end":{"line":41,"column":45}},"35":{"start":{"line":42,"column":12},"end":{"line":42,"column":86}},"36":{"start":{"line":43,"column":26},"end":{"line":43,"column":56}},"37":{"start":{"line":44,"column":12},"end":{"line":44,"column":54}},"38":{"start":{"line":45,"column":12},"end":{"line":45,"column":34}},"39":{"start":{"line":47,"column":8},"end":{"line":47,"column":21}},"40":{"start":{"line":50,"column":4},"end":{"line":52,"column":6}},"41":{"start":{"line":51,"column":8},"end":{"line":51,"column":37}},"42":{"start":{"line":54,"column":4},"end":{"line":56,"column":6}},"43":{"start":{"line":55,"column":8},"end":{"line":55,"column":28}},"44":{"start":{"line":57,"column":4},"end":{"line":57,"column":24}},"45":{"start":{"line":59,"column":0},"end":{"line":59,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":80},"end":{"line":9,"column":81}},"loc":{"start":{"line":9,"column":95},"end":{"line":11,"column":1}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":11,"column":5},"end":{"line":11,"column":6}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":1}},"line":11},"5":{"name":"(anonymous_5)","decl":{"start":{"line":14,"column":50},"end":{"line":14,"column":51}},"loc":{"start":{"line":14,"column":65},"end":{"line":20,"column":1}},"line":14},"6":{"name":"(anonymous_6)","decl":{"start":{"line":28,"column":34},"end":{"line":28,"column":35}},"loc":{"start":{"line":28,"column":46},"end":{"line":58,"column":1}},"line":28},"7":{"name":"ASTGenerator","decl":{"start":{"line":29,"column":13},"end":{"line":29,"column":25}},"loc":{"start":{"line":29,"column":37},"end":{"line":33,"column":5}},"line":29},"8":{"name":"(anonymous_8)","decl":{"start":{"line":35,"column":42},"end":{"line":35,"column":43}},"loc":{"start":{"line":35,"column":54},"end":{"line":48,"column":5}},"line":35},"9":{"name":"(anonymous_9)","decl":{"start":{"line":39,"column":31},"end":{"line":39,"column":32}},"loc":{"start":{"line":39,"column":47},"end":{"line":46,"column":9}},"line":39},"10":{"name":"(anonymous_10)","decl":{"start":{"line":50,"column":45},"end":{"line":50,"column":46}},"loc":{"start":{"line":50,"column":57},"end":{"line":52,"column":5}},"line":50},"11":{"name":"(anonymous_11)","decl":{"start":{"line":54,"column":41},"end":{"line":54,"column":42}},"loc":{"start":{"line":54,"column":53},"end":{"line":56,"column":5}},"line":54}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"type":"binary-expr","locations":[{"start":{"line":9,"column":26},"end":{"line":9,"column":30}},{"start":{"line":9,"column":34},"end":{"line":9,"column":57}},{"start":{"line":9,"column":63},"end":{"line":13,"column":1}}],"line":9},"5":{"loc":{"start":{"line":9,"column":63},"end":{"line":13,"column":1}},"type":"cond-expr","locations":[{"start":{"line":9,"column":80},"end":{"line":11,"column":1}},{"start":{"line":11,"column":5},"end":{"line":13,"column":1}}],"line":9},"6":{"loc":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":14,"column":20},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":45}},{"start":{"line":14,"column":50},"end":{"line":20,"column":1}}],"line":14},"7":{"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}],"line":15},"8":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":29}}],"line":15},"9":{"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},{"start":{"line":17,"column":4},"end":{"line":17,"column":141}}],"line":17},"10":{"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},{"start":{"line":17,"column":40},"end":{"line":17,"column":141}}],"line":17},"11":{"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":107}},"type":"binary-expr","locations":[{"start":{"line":17,"column":44},"end":{"line":17,"column":59}},{"start":{"line":17,"column":63},"end":{"line":17,"column":107}}],"line":17}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1,"24":1,"25":64,"26":64,"27":64,"28":1,"29":64,"30":64,"31":64,"32":64,"33":72,"34":72,"35":72,"36":72,"37":72,"38":72,"39":64,"40":1,"41":64,"42":1,"43":64,"44":1,"45":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":1,"6":1,"7":64,"8":64,"9":72,"10":64,"11":64},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1,1],"7":[1,0],"8":[1,1],"9":[0,0],"10":[0,0],"11":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/ASTGenerator/ASTGenerator.ts","sources":["C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/ASTGenerator/ASTGenerator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,iDAAoC;AAEpC,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AAExB;;;GAGG;AACH;IAKE,sBAAY,SAAwB;QAClC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;QACjB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAA;QAC1B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;IAC5B,CAAC;IACD,qCAAqC;IACrC,mCAAY,GAAZ;QAAA,iBAYC;QAXC,IAAI,KAAK,GAAsB,EAAE,CAAA;QACjC,IAAI,OAAO,GAAW,CAAC,CAAA;QACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,IAAY;YAClC,IAAI,OAAO,GAAW,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,CAAA;YAChE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAA;YAC/B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAA;YACxE,IAAM,OAAO,GAAW,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;YACtD,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAA;YACxC,OAAO,GAAG,OAAO,GAAG,CAAC,CAAA;QACvB,CAAC,CAAC,CAAA;QACF,OAAO,KAAK,CAAA;IACd,CAAC;IAED,gDAAgD;IAChD,sCAAe,GAAf;QACE,OAAO,IAAI,CAAC,gBAAgB,CAAA;IAC9B,CAAC;IAED,+CAA+C;IAC/C,kCAAW,GAAX;QACE,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IACH,mBAAC;AAAD,CAAC,AAlCD,IAkCC;AAED,kBAAe,YAAY,CAAA","sourcesContent":["import IASTGenerator from \"./IASTGenerator\"\r\nimport * as babel from \"@babel/core\"\r\nimport { SubmissionCode, SubmissionMap } from \"../Types/PlagResultType\"\r\nconst fs = require(\"fs\")\r\n\r\n/**\r\n * Class implements IASTGenerator.\r\n * Implements method that takes in path and generate all root nodes.\r\n */\r\nclass ASTGenerator implements IASTGenerator {\r\n  private fileMap: SubmissionMap\r\n  private mapFileToContent: SubmissionCode\r\n  private filePaths: Array<string>\r\n\r\n  constructor(filePaths: Array<string>) {\r\n    this.fileMap = {}\r\n    this.mapFileToContent = {}\r\n    this.filePaths = filePaths\r\n  }\r\n  // Method to generate all root nodes.\r\n  generateASTs(): Array<babel.Node> {\r\n    let nodes: Array<babel.Node> = []\r\n    let counter: number = 0\r\n    this.filePaths.forEach((path: string) => {\r\n      let newPath: string = path.split(/Submission\\d{1}[/\\\\]{1,2}/)[1]\r\n      this.fileMap[counter] = newPath\r\n      nodes.push(babel.transformFileSync(path, { ast: true, code:false }).ast)\r\n      const content: string = fs.readFileSync(path, \"utf-8\")\r\n      this.mapFileToContent[newPath] = content\r\n      counter = counter + 1\r\n    })\r\n    return nodes\r\n  }\r\n\r\n  // Method to get the map of file to its content.\r\n  getFileContents(): SubmissionCode {\r\n    return this.mapFileToContent\r\n  }\r\n\r\n  // Method to get map of index to the file path.\r\n  getFileMaps(): SubmissionMap {\r\n    return this.fileMap\r\n  }\r\n}\r\n\r\nexport default ASTGenerator\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bc4c00575236d59bdae27ec9a45ecc49f0bb4975","contentHash":"d32db5099aa0493836ff6596f392221f28ad6d3d1ea3b5ccd226814c686cdfdf"},"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\FilePathGetter\\FilePathGetter.ts":{"path":"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\FilePathGetter\\FilePathGetter.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":9},"end":{"line":3,"column":22}},"2":{"start":{"line":4,"column":11},"end":{"line":4,"column":26}},"3":{"start":{"line":9,"column":36},"end":{"line":34,"column":3}},"4":{"start":{"line":13,"column":4},"end":{"line":16,"column":6}},"5":{"start":{"line":14,"column":27},"end":{"line":14,"column":29}},"6":{"start":{"line":15,"column":8},"end":{"line":15,"column":66}},"7":{"start":{"line":18,"column":4},"end":{"line":32,"column":6}},"8":{"start":{"line":19,"column":20},"end":{"line":19,"column":24}},"9":{"start":{"line":20,"column":20},"end":{"line":20,"column":49}},"10":{"start":{"line":21,"column":8},"end":{"line":30,"column":11}},"11":{"start":{"line":22,"column":12},"end":{"line":29,"column":13}},"12":{"start":{"line":23,"column":16},"end":{"line":23,"column":96}},"13":{"start":{"line":26,"column":16},"end":{"line":28,"column":17}},"14":{"start":{"line":27,"column":20},"end":{"line":27,"column":75}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":28}},"16":{"start":{"line":33,"column":4},"end":{"line":33,"column":26}},"17":{"start":{"line":35,"column":0},"end":{"line":35,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":36},"end":{"line":9,"column":37}},"loc":{"start":{"line":9,"column":48},"end":{"line":34,"column":1}},"line":9},"1":{"name":"FilePathGetter","decl":{"start":{"line":10,"column":13},"end":{"line":10,"column":27}},"loc":{"start":{"line":10,"column":30},"end":{"line":11,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":44},"end":{"line":13,"column":45}},"loc":{"start":{"line":13,"column":69},"end":{"line":16,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":18,"column":48},"end":{"line":18,"column":49}},"loc":{"start":{"line":18,"column":87},"end":{"line":32,"column":5}},"line":18},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":22},"end":{"line":21,"column":23}},"loc":{"start":{"line":21,"column":38},"end":{"line":30,"column":9}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":12},"end":{"line":29,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":29,"column":13}},{"start":{"line":22,"column":12},"end":{"line":29,"column":13}}],"line":22},"1":{"loc":{"start":{"line":26,"column":16},"end":{"line":28,"column":17}},"type":"if","locations":[{"start":{"line":26,"column":16},"end":{"line":28,"column":17}},{"start":{"line":26,"column":16},"end":{"line":28,"column":17}}],"line":26}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":78,"6":78,"7":1,"8":85,"9":85,"10":85,"11":96,"12":7,"13":89,"14":76,"15":85,"16":1,"17":1},"f":{"0":1,"1":39,"2":78,"3":85,"4":96},"b":{"0":[7,89],"1":[76,13]},"inputSourceMap":{"version":3,"file":"C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/FilePathGetter/FilePathGetter.ts","sources":["C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/FilePathGetter/FilePathGetter.ts"],"names":[],"mappings":";;AACA,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACxB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAE1B;;;GAGG;AACH;IAAA;IAsBA,CAAC;IApBG,+DAA+D;IAC/D,qCAAY,GAAZ,UAAa,aAAqB;QAC9B,IAAI,YAAY,GAAkB,EAAE,CAAC;QACrC,OAAO,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAA;IAC7D,CAAC;IAED,kCAAkC;IAC1B,yCAAgB,GAAxB,UAAyB,aAAqB,EAAE,YAA2B;QAA3E,iBAYC;QAXG,IAAI,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAA;QACzC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAY;YACvB,IAAI,EAAE,CAAC,QAAQ,CAAC,aAAa,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;gBACvD,YAAY,GAAG,KAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,GAAG,GAAG,IAAI,EAAE,YAAY,CAAC,CAAA;aACjF;iBAAM;gBACH,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;oBACtB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAA;iBACzD;aACJ;QACL,CAAC,CAAC,CAAA;QACF,OAAO,YAAY,CAAA;IACvB,CAAC;IACL,qBAAC;AAAD,CAAC,AAtBD,IAsBC;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import IFilePathGetter from \"./IFilePathGetter\"\r\nconst fs = require(\"fs\")\r\nvar path = require(\"path\")\r\n\r\n/**\r\n * Class Implements IFilePathGetter interface. \r\n * Takes in a directory and fetches all files in all nested directories.\r\n */\r\nclass FilePathGetter implements IFilePathGetter {\r\n\r\n    // Method to get all file path in directory and sub directories\r\n    getFilePaths(directoryPath: string): Array<string> {\r\n        let arrayOfFiles: Array<string> = [];\r\n        return this.getDeepFilePaths(directoryPath, arrayOfFiles)\r\n    }\r\n\r\n    // helper method to get file paths\r\n    private getDeepFilePaths(directoryPath: string, arrayOfFiles: Array<string>): Array<string> {\r\n        let files = fs.readdirSync(directoryPath)\r\n        files.forEach((file: string) => {\r\n            if (fs.statSync(directoryPath + \"/\" + file).isDirectory()) {\r\n                arrayOfFiles = this.getDeepFilePaths(directoryPath + \"/\" + file, arrayOfFiles)\r\n            } else {\r\n                if (file.endsWith(\".js\")) {\r\n                    arrayOfFiles.push(path.join(directoryPath, \"/\", file))\r\n                }\r\n            }\r\n        })\r\n        return arrayOfFiles\r\n    }\r\n}\r\n\r\nexport default FilePathGetter;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d2d533d68375a0ff66abd28d1f5498cf971a6292","contentHash":"da63595973d5d2985cdb2f23107c7f36940323d4e3ad926cdff9e792f356d8bc"},"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\PlagDetector\\JSPlagDetector.ts":{"path":"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\PlagDetector\\JSPlagDetector.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":72}},"10":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"11":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"13":{"start":{"line":15,"column":31},"end":{"line":15,"column":42}},"14":{"start":{"line":16,"column":17},"end":{"line":16,"column":19}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"16":{"start":{"line":17,"column":21},"end":{"line":17,"column":141}},"17":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"18":{"start":{"line":17,"column":109},"end":{"line":17,"column":141}},"19":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"20":{"start":{"line":19,"column":4},"end":{"line":19,"column":18}},"21":{"start":{"line":21,"column":22},"end":{"line":23,"column":1}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":62}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":62}},"24":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"25":{"start":{"line":26,"column":12},"end":{"line":26,"column":48}},"26":{"start":{"line":27,"column":18},"end":{"line":27,"column":62}},"27":{"start":{"line":31,"column":36},"end":{"line":203,"column":3}},"28":{"start":{"line":34,"column":8},"end":{"line":34,"column":39}},"29":{"start":{"line":35,"column":8},"end":{"line":35,"column":39}},"30":{"start":{"line":36,"column":8},"end":{"line":36,"column":41}},"31":{"start":{"line":37,"column":8},"end":{"line":37,"column":41}},"32":{"start":{"line":39,"column":4},"end":{"line":111,"column":6}},"33":{"start":{"line":40,"column":20},"end":{"line":40,"column":24}},"34":{"start":{"line":41,"column":21},"end":{"line":41,"column":23}},"35":{"start":{"line":42,"column":38},"end":{"line":42,"column":39}},"36":{"start":{"line":43,"column":35},"end":{"line":43,"column":36}},"37":{"start":{"line":44,"column":39},"end":{"line":44,"column":40}},"38":{"start":{"line":46,"column":31},"end":{"line":46,"column":66}},"39":{"start":{"line":47,"column":31},"end":{"line":47,"column":66}},"40":{"start":{"line":49,"column":8},"end":{"line":102,"column":11}},"41":{"start":{"line":51,"column":27},"end":{"line":51,"column":82}},"42":{"start":{"line":52,"column":12},"end":{"line":52,"column":93}},"43":{"start":{"line":54,"column":41},"end":{"line":54,"column":50}},"44":{"start":{"line":57,"column":12},"end":{"line":99,"column":15}},"45":{"start":{"line":58,"column":31},"end":{"line":58,"column":40}},"46":{"start":{"line":59,"column":31},"end":{"line":59,"column":40}},"47":{"start":{"line":60,"column":16},"end":{"line":82,"column":19}},"48":{"start":{"line":62,"column":20},"end":{"line":81,"column":21}},"49":{"start":{"line":64,"column":24},"end":{"line":80,"column":27}},"50":{"start":{"line":66,"column":28},"end":{"line":79,"column":29}},"51":{"start":{"line":68,"column":32},"end":{"line":78,"column":33}},"52":{"start":{"line":70,"column":36},"end":{"line":73,"column":37}},"53":{"start":{"line":70,"column":49},"end":{"line":70,"column":69}},"54":{"start":{"line":71,"column":40},"end":{"line":71,"column":56}},"55":{"start":{"line":72,"column":40},"end":{"line":72,"column":70}},"56":{"start":{"line":75,"column":36},"end":{"line":77,"column":37}},"57":{"start":{"line":75,"column":49},"end":{"line":75,"column":69}},"58":{"start":{"line":76,"column":40},"end":{"line":76,"column":56}},"59":{"start":{"line":84,"column":16},"end":{"line":98,"column":17}},"60":{"start":{"line":85,"column":20},"end":{"line":85,"column":68}},"61":{"start":{"line":86,"column":38},"end":{"line":86,"column":40}},"62":{"start":{"line":87,"column":37},"end":{"line":90,"column":21}},"63":{"start":{"line":91,"column":37},"end":{"line":94,"column":21}},"64":{"start":{"line":95,"column":20},"end":{"line":95,"column":57}},"65":{"start":{"line":96,"column":20},"end":{"line":96,"column":57}},"66":{"start":{"line":97,"column":20},"end":{"line":97,"column":63}},"67":{"start":{"line":100,"column":12},"end":{"line":101,"column":71}},"68":{"start":{"line":104,"column":20},"end":{"line":104,"column":78}},"69":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"70":{"start":{"line":107,"column":12},"end":{"line":107,"column":24}},"71":{"start":{"line":109,"column":8},"end":{"line":109,"column":29}},"72":{"start":{"line":110,"column":8},"end":{"line":110,"column":22}},"73":{"start":{"line":113,"column":4},"end":{"line":125,"column":6}},"74":{"start":{"line":114,"column":34},"end":{"line":114,"column":36}},"75":{"start":{"line":115,"column":8},"end":{"line":123,"column":11}},"76":{"start":{"line":116,"column":34},"end":{"line":116,"column":36}},"77":{"start":{"line":117,"column":12},"end":{"line":121,"column":15}},"78":{"start":{"line":119,"column":20},"end":{"line":119,"column":52}},"79":{"start":{"line":122,"column":12},"end":{"line":122,"column":54}},"80":{"start":{"line":124,"column":8},"end":{"line":124,"column":35}},"81":{"start":{"line":127,"column":4},"end":{"line":141,"column":6}},"82":{"start":{"line":128,"column":8},"end":{"line":140,"column":25}},"83":{"start":{"line":133,"column":12},"end":{"line":136,"column":13}},"84":{"start":{"line":135,"column":16},"end":{"line":135,"column":29}},"85":{"start":{"line":137,"column":12},"end":{"line":137,"column":24}},"86":{"start":{"line":140,"column":12},"end":{"line":140,"column":25}},"87":{"start":{"line":143,"column":4},"end":{"line":201,"column":6}},"88":{"start":{"line":146,"column":8},"end":{"line":147,"column":25}},"89":{"start":{"line":147,"column":12},"end":{"line":147,"column":25}},"90":{"start":{"line":149,"column":8},"end":{"line":150,"column":24}},"91":{"start":{"line":150,"column":12},"end":{"line":150,"column":24}},"92":{"start":{"line":151,"column":32},"end":{"line":163,"column":9}},"93":{"start":{"line":165,"column":8},"end":{"line":173,"column":9}},"94":{"start":{"line":169,"column":12},"end":{"line":172,"column":65}},"95":{"start":{"line":175,"column":8},"end":{"line":192,"column":9}},"96":{"start":{"line":176,"column":12},"end":{"line":177,"column":25}},"97":{"start":{"line":177,"column":16},"end":{"line":177,"column":25}},"98":{"start":{"line":179,"column":12},"end":{"line":180,"column":29}},"99":{"start":{"line":180,"column":16},"end":{"line":180,"column":29}},"100":{"start":{"line":181,"column":12},"end":{"line":191,"column":13}},"101":{"start":{"line":184,"column":20},"end":{"line":185,"column":37}},"102":{"start":{"line":185,"column":24},"end":{"line":185,"column":37}},"103":{"start":{"line":186,"column":20},"end":{"line":186,"column":26}},"104":{"start":{"line":189,"column":20},"end":{"line":190,"column":37}},"105":{"start":{"line":190,"column":24},"end":{"line":190,"column":37}},"106":{"start":{"line":194,"column":8},"end":{"line":199,"column":9}},"107":{"start":{"line":195,"column":12},"end":{"line":196,"column":25}},"108":{"start":{"line":196,"column":16},"end":{"line":196,"column":25}},"109":{"start":{"line":197,"column":12},"end":{"line":198,"column":29}},"110":{"start":{"line":198,"column":16},"end":{"line":198,"column":29}},"111":{"start":{"line":200,"column":8},"end":{"line":200,"column":20}},"112":{"start":{"line":202,"column":4},"end":{"line":202,"column":26}},"113":{"start":{"line":204,"column":0},"end":{"line":204,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":80},"end":{"line":9,"column":81}},"loc":{"start":{"line":9,"column":95},"end":{"line":11,"column":1}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":11,"column":5},"end":{"line":11,"column":6}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":1}},"line":11},"5":{"name":"(anonymous_5)","decl":{"start":{"line":14,"column":50},"end":{"line":14,"column":51}},"loc":{"start":{"line":14,"column":65},"end":{"line":20,"column":1}},"line":14},"6":{"name":"(anonymous_6)","decl":{"start":{"line":21,"column":56},"end":{"line":21,"column":57}},"loc":{"start":{"line":21,"column":71},"end":{"line":23,"column":1}},"line":21},"7":{"name":"(anonymous_7)","decl":{"start":{"line":31,"column":36},"end":{"line":31,"column":37}},"loc":{"start":{"line":31,"column":48},"end":{"line":203,"column":1}},"line":31},"8":{"name":"JSPlagDetector","decl":{"start":{"line":33,"column":13},"end":{"line":33,"column":27}},"loc":{"start":{"line":33,"column":82},"end":{"line":38,"column":5}},"line":33},"9":{"name":"(anonymous_9)","decl":{"start":{"line":39,"column":38},"end":{"line":39,"column":39}},"loc":{"start":{"line":39,"column":50},"end":{"line":111,"column":5}},"line":39},"10":{"name":"(anonymous_10)","decl":{"start":{"line":49,"column":33},"end":{"line":49,"column":34}},"loc":{"start":{"line":49,"column":58},"end":{"line":102,"column":9}},"line":49},"11":{"name":"(anonymous_11)","decl":{"start":{"line":57,"column":37},"end":{"line":57,"column":38}},"loc":{"start":{"line":57,"column":62},"end":{"line":99,"column":13}},"line":57},"12":{"name":"(anonymous_12)","decl":{"start":{"line":60,"column":30},"end":{"line":60,"column":31}},"loc":{"start":{"line":60,"column":47},"end":{"line":82,"column":17}},"line":60},"13":{"name":"(anonymous_13)","decl":{"start":{"line":64,"column":38},"end":{"line":64,"column":39}},"loc":{"start":{"line":64,"column":55},"end":{"line":80,"column":25}},"line":64},"14":{"name":"(anonymous_14)","decl":{"start":{"line":113,"column":44},"end":{"line":113,"column":45}},"loc":{"start":{"line":113,"column":65},"end":{"line":125,"column":5}},"line":113},"15":{"name":"(anonymous_15)","decl":{"start":{"line":115,"column":26},"end":{"line":115,"column":27}},"loc":{"start":{"line":115,"column":41},"end":{"line":123,"column":9}},"line":115},"16":{"name":"(anonymous_16)","decl":{"start":{"line":118,"column":23},"end":{"line":118,"column":24}},"loc":{"start":{"line":118,"column":39},"end":{"line":120,"column":17}},"line":118},"17":{"name":"(anonymous_17)","decl":{"start":{"line":127,"column":52},"end":{"line":127,"column":53}},"loc":{"start":{"line":127,"column":68},"end":{"line":141,"column":5}},"line":127},"18":{"name":"(anonymous_18)","decl":{"start":{"line":143,"column":44},"end":{"line":143,"column":45}},"loc":{"start":{"line":143,"column":68},"end":{"line":201,"column":5}},"line":143}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"type":"binary-expr","locations":[{"start":{"line":9,"column":26},"end":{"line":9,"column":30}},{"start":{"line":9,"column":34},"end":{"line":9,"column":57}},{"start":{"line":9,"column":63},"end":{"line":13,"column":1}}],"line":9},"5":{"loc":{"start":{"line":9,"column":63},"end":{"line":13,"column":1}},"type":"cond-expr","locations":[{"start":{"line":9,"column":80},"end":{"line":11,"column":1}},{"start":{"line":11,"column":5},"end":{"line":13,"column":1}}],"line":9},"6":{"loc":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":14,"column":20},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":45}},{"start":{"line":14,"column":50},"end":{"line":20,"column":1}}],"line":14},"7":{"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}],"line":15},"8":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":29}}],"line":15},"9":{"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},{"start":{"line":17,"column":4},"end":{"line":17,"column":141}}],"line":17},"10":{"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},{"start":{"line":17,"column":40},"end":{"line":17,"column":141}}],"line":17},"11":{"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":107}},"type":"binary-expr","locations":[{"start":{"line":17,"column":44},"end":{"line":17,"column":59}},{"start":{"line":17,"column":63},"end":{"line":17,"column":107}}],"line":17},"12":{"loc":{"start":{"line":21,"column":22},"end":{"line":23,"column":1}},"type":"binary-expr","locations":[{"start":{"line":21,"column":23},"end":{"line":21,"column":27}},{"start":{"line":21,"column":31},"end":{"line":21,"column":51}},{"start":{"line":21,"column":56},"end":{"line":23,"column":1}}],"line":21},"13":{"loc":{"start":{"line":22,"column":11},"end":{"line":22,"column":61}},"type":"cond-expr","locations":[{"start":{"line":22,"column":37},"end":{"line":22,"column":40}},{"start":{"line":22,"column":43},"end":{"line":22,"column":61}}],"line":22},"14":{"loc":{"start":{"line":22,"column":12},"end":{"line":22,"column":33}},"type":"binary-expr","locations":[{"start":{"line":22,"column":12},"end":{"line":22,"column":15}},{"start":{"line":22,"column":19},"end":{"line":22,"column":33}}],"line":22},"15":{"loc":{"start":{"line":62,"column":20},"end":{"line":81,"column":21}},"type":"if","locations":[{"start":{"line":62,"column":20},"end":{"line":81,"column":21}},{"start":{"line":62,"column":20},"end":{"line":81,"column":21}}],"line":62},"16":{"loc":{"start":{"line":66,"column":28},"end":{"line":79,"column":29}},"type":"if","locations":[{"start":{"line":66,"column":28},"end":{"line":79,"column":29}},{"start":{"line":66,"column":28},"end":{"line":79,"column":29}}],"line":66},"17":{"loc":{"start":{"line":68,"column":32},"end":{"line":78,"column":33}},"type":"if","locations":[{"start":{"line":68,"column":32},"end":{"line":78,"column":33}},{"start":{"line":68,"column":32},"end":{"line":78,"column":33}}],"line":68},"18":{"loc":{"start":{"line":84,"column":16},"end":{"line":98,"column":17}},"type":"if","locations":[{"start":{"line":84,"column":16},"end":{"line":98,"column":17}},{"start":{"line":84,"column":16},"end":{"line":98,"column":17}}],"line":84},"19":{"loc":{"start":{"line":84,"column":20},"end":{"line":84,"column":61}},"type":"binary-expr","locations":[{"start":{"line":84,"column":20},"end":{"line":84,"column":39}},{"start":{"line":84,"column":43},"end":{"line":84,"column":61}}],"line":84},"20":{"loc":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},{"start":{"line":106,"column":8},"end":{"line":108,"column":9}}],"line":106},"21":{"loc":{"start":{"line":128,"column":8},"end":{"line":140,"column":25}},"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":140,"column":25}},{"start":{"line":128,"column":8},"end":{"line":140,"column":25}}],"line":128},"22":{"loc":{"start":{"line":128,"column":12},"end":{"line":131,"column":39}},"type":"binary-expr","locations":[{"start":{"line":128,"column":12},"end":{"line":128,"column":31}},{"start":{"line":129,"column":12},"end":{"line":129,"column":37}},{"start":{"line":130,"column":12},"end":{"line":130,"column":36}},{"start":{"line":131,"column":12},"end":{"line":131,"column":39}}],"line":128},"23":{"loc":{"start":{"line":133,"column":12},"end":{"line":136,"column":13}},"type":"if","locations":[{"start":{"line":133,"column":12},"end":{"line":136,"column":13}},{"start":{"line":133,"column":12},"end":{"line":136,"column":13}}],"line":133},"24":{"loc":{"start":{"line":133,"column":16},"end":{"line":134,"column":49}},"type":"binary-expr","locations":[{"start":{"line":133,"column":16},"end":{"line":133,"column":54}},{"start":{"line":134,"column":16},"end":{"line":134,"column":49}}],"line":133},"25":{"loc":{"start":{"line":146,"column":8},"end":{"line":147,"column":25}},"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":147,"column":25}},{"start":{"line":146,"column":8},"end":{"line":147,"column":25}}],"line":146},"26":{"loc":{"start":{"line":146,"column":12},"end":{"line":146,"column":76}},"type":"binary-expr","locations":[{"start":{"line":146,"column":12},"end":{"line":146,"column":25}},{"start":{"line":146,"column":29},"end":{"line":146,"column":42}},{"start":{"line":146,"column":46},"end":{"line":146,"column":59}},{"start":{"line":146,"column":63},"end":{"line":146,"column":76}}],"line":146},"27":{"loc":{"start":{"line":149,"column":8},"end":{"line":150,"column":24}},"type":"if","locations":[{"start":{"line":149,"column":8},"end":{"line":150,"column":24}},{"start":{"line":149,"column":8},"end":{"line":150,"column":24}}],"line":149},"28":{"loc":{"start":{"line":149,"column":12},"end":{"line":149,"column":42}},"type":"binary-expr","locations":[{"start":{"line":149,"column":12},"end":{"line":149,"column":25}},{"start":{"line":149,"column":29},"end":{"line":149,"column":42}}],"line":149},"29":{"loc":{"start":{"line":165,"column":8},"end":{"line":173,"column":9}},"type":"if","locations":[{"start":{"line":165,"column":8},"end":{"line":173,"column":9}},{"start":{"line":165,"column":8},"end":{"line":173,"column":9}}],"line":165},"30":{"loc":{"start":{"line":165,"column":12},"end":{"line":168,"column":45}},"type":"binary-expr","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":25}},{"start":{"line":166,"column":12},"end":{"line":166,"column":25}},{"start":{"line":167,"column":12},"end":{"line":167,"column":45}},{"start":{"line":168,"column":12},"end":{"line":168,"column":45}}],"line":165},"31":{"loc":{"start":{"line":169,"column":20},"end":{"line":172,"column":63}},"type":"binary-expr","locations":[{"start":{"line":169,"column":21},"end":{"line":169,"column":62}},{"start":{"line":170,"column":16},"end":{"line":170,"column":59}},{"start":{"line":171,"column":17},"end":{"line":171,"column":59}},{"start":{"line":172,"column":20},"end":{"line":172,"column":62}}],"line":169},"32":{"loc":{"start":{"line":176,"column":12},"end":{"line":177,"column":25}},"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":177,"column":25}},{"start":{"line":176,"column":12},"end":{"line":177,"column":25}}],"line":176},"33":{"loc":{"start":{"line":179,"column":12},"end":{"line":180,"column":29}},"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":180,"column":29}},{"start":{"line":179,"column":12},"end":{"line":180,"column":29}}],"line":179},"34":{"loc":{"start":{"line":181,"column":12},"end":{"line":191,"column":13}},"type":"switch","locations":[{"start":{"line":183,"column":16},"end":{"line":186,"column":26}},{"start":{"line":188,"column":16},"end":{"line":190,"column":37}}],"line":181},"35":{"loc":{"start":{"line":184,"column":20},"end":{"line":185,"column":37}},"type":"if","locations":[{"start":{"line":184,"column":20},"end":{"line":185,"column":37}},{"start":{"line":184,"column":20},"end":{"line":185,"column":37}}],"line":184},"36":{"loc":{"start":{"line":189,"column":20},"end":{"line":190,"column":37}},"type":"if","locations":[{"start":{"line":189,"column":20},"end":{"line":190,"column":37}},{"start":{"line":189,"column":20},"end":{"line":190,"column":37}}],"line":189},"37":{"loc":{"start":{"line":195,"column":12},"end":{"line":196,"column":25}},"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":196,"column":25}},{"start":{"line":195,"column":12},"end":{"line":196,"column":25}}],"line":195},"38":{"loc":{"start":{"line":197,"column":12},"end":{"line":198,"column":29}},"type":"if","locations":[{"start":{"line":197,"column":12},"end":{"line":198,"column":29}},{"start":{"line":197,"column":12},"end":{"line":198,"column":29}}],"line":197}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":32,"29":32,"30":32,"31":32,"32":1,"33":32,"34":32,"35":32,"36":32,"37":32,"38":32,"39":32,"40":32,"41":36,"42":36,"43":36,"44":36,"45":44,"46":44,"47":44,"48":19308,"49":2087,"50":1238783,"51":130959,"52":2875,"53":2875,"54":13365,"55":13365,"56":2875,"57":2875,"58":13366,"59":44,"60":36,"61":36,"62":36,"63":36,"64":36,"65":36,"66":36,"67":36,"68":32,"69":32,"70":9,"71":32,"72":32,"73":1,"74":64,"75":64,"76":72,"77":72,"78":37000,"79":72,"80":64,"81":1,"82":1258091,"83":337732,"84":204686,"85":133046,"86":920359,"87":1,"88":322823,"89":0,"90":322823,"91":3599,"92":319224,"93":319224,"94":3278,"95":315946,"96":1599440,"97":1117127,"98":482313,"99":700,"100":481613,"101":185242,"102":88321,"103":96921,"104":296371,"105":126882,"106":100043,"107":848504,"108":664552,"109":183952,"110":660,"111":99383,"112":1,"113":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":1,"6":1,"7":1,"8":32,"9":32,"10":36,"11":44,"12":19308,"13":1238783,"14":64,"15":72,"16":37000,"17":1258091,"18":322823},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1,1],"7":[1,0],"8":[1,1],"9":[0,0],"10":[0,0],"11":[0,0],"12":[1,1,1],"13":[1,0],"14":[1,1],"15":[2087,17221],"16":[130959,1107824],"17":[2875,128084],"18":[36,8],"19":[44,36],"20":[9,23],"21":[337732,920359],"22":[1258091,1160239,1066543,946864],"23":[204686,133046],"24":[337732,244036],"25":[0,322823],"26":[322823,3599,322823,319224],"27":[3599,319224],"28":[322823,3599],"29":[3278,315946],"30":[319224,319224,319224,4541],"31":[3278,3120,158,66],"32":[1117127,482313],"33":[700,481613],"34":[185242,296371],"35":[88321,96921],"36":[126882,169489],"37":[664552,183952],"38":[660,183292]},"inputSourceMap":{"version":3,"file":"C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/PlagDetector/JSPlagDetector.ts","sources":["C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/PlagDetector/JSPlagDetector.ts"],"names":[],"mappings":"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","sourcesContent":["import IPlagDetector from \"./IPlagDetector\"\r\nvar _ = require(\"lodash\")\r\nimport * as babel from \"@babel/core\"\r\nimport generate from \"@babel/generator\"\r\nimport {\r\n\tPlagResult,\r\n\tSimilarityLines,\r\n\tSimilaritySubmissions,\r\n\tSubmissionMap,\r\n} from \"../Types/PlagResultType\"\r\n\r\n/**\r\n * Class implements IPlagDetector for Javascript.\r\n */\r\nclass JSPlagDetector implements IPlagDetector {\r\n\tprivate submission1: Array<babel.Node>\r\n\tprivate submission2: Array<babel.Node>\r\n\tprivate file1NameMap: SubmissionMap\r\n\tprivate file2NameMap: SubmissionMap\r\n\r\n\t//Constructor for JSPlagDetector.\r\n\tconstructor(\r\n\t\tsubmission1: Array<babel.Node>,\r\n\t\tsubmission2: Array<babel.Node>,\r\n\t\tfile1NameMap: SubmissionMap,\r\n\t\tfile2NameMap: SubmissionMap\r\n\t) {\r\n\t\tthis.submission1 = submission1\r\n\t\tthis.submission2 = submission2\r\n\t\tthis.file1NameMap = file1NameMap\r\n\t\tthis.file2NameMap = file2NameMap\r\n\t}\r\n\r\n\tdetect(): PlagResult {\r\n\t\r\n\t\tlet result: PlagResult = {} as PlagResult\r\n\t\tlet totalLinesInSubmission1: number = 0\r\n\t\tlet numberOfFilesMatched: number = 0\r\n\t\tlet numberOfLinesPlagiarised: number = 0\r\n\t\t\r\n\t\t// get all node from root nodes\r\n\t\tconst submission1Nodes: Array<Array<babel.Node>> = this.collectNodes(\r\n\t\t\tthis.submission1\r\n\t\t)\r\n\t\tconst submission2Nodes: Array<Array<babel.Node>> = this.collectNodes(\r\n\t\t\tthis.submission2\r\n\t\t)\r\n\t\t\r\n\t\t// loop through first submission.\r\n\t\tsubmission1Nodes.forEach((file1: Array<babel.Node>, index1: number) => {\r\n\t\t\t\r\n\t\t\t// calculate total number of lines in submission1.\r\n\t\t\tconst codeTemp = generate(file1[0], {comments: false}).code\r\n\t\t\ttotalLinesInSubmission1 += codeTemp.replace(/^\\s*\\n/gm, \"\").split(/\\n/gm).length\r\n\t\t\t// file1[0].loc.end.line\r\n\t\t\tlet linesPlagiarisedInFile: Set<number> = new Set()\r\n\t\t\t// each node in the file\r\n\t\t\t// check each file of submission 2\r\n\t\t\tsubmission2Nodes.forEach((file2: Array<babel.Node>, index2: number) => {\r\n\t\t\t\tlet lineSet1: Set<number> = new Set()\r\n\t\t\t\tlet lineSet2: Set<number> = new Set()\r\n\r\n\t\t\t\tfile1.forEach((node1: babel.Node) => {\r\n\t\t\t\t\t// check if the node is sub-nested node.\r\n\t\t\t\t\tif (this.checkConditionHelper(node1)) {\r\n\t\t\t\t\t\t// check each of nodes of submission 2.\r\n\t\t\t\t\t\tfile2.forEach((node2: babel.Node) => {\r\n\t\t\t\t\t\t\t// check if the node is sub-nested.\r\n\t\t\t\t\t\t\tif (this.checkConditionHelper(node2)) {\r\n\t\t\t\t\t\t\t\t// if plagiarism is found.\r\n\t\t\t\t\t\t\t\tif (this.compareNodes(node1, node2) === true) {\r\n\t\t\t\t\t\t\t\t\t// add lines to sets of file 1.\r\n\t\t\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\t\t\tlet i: number = node1.loc.start.line;\r\n\t\t\t\t\t\t\t\t\t\ti <= node1.loc.end.line;\r\n\t\t\t\t\t\t\t\t\t\ti++\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tlineSet1.add(i)\r\n\t\t\t\t\t\t\t\t\t\tlinesPlagiarisedInFile.add(i)\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// add lines to sets of file 2.\r\n\t\t\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\t\t\tlet i: number = node2.loc.start.line;\r\n\t\t\t\t\t\t\t\t\t\ti <= node2.loc.end.line;\r\n\t\t\t\t\t\t\t\t\t\ti++\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tlineSet2.add(i)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t\r\n\t\t\t\t// add the lines for respective files.\r\n\t\t\t\tif (lineSet1.size !== 0 && lineSet2.size != 0) {\r\n\t\t\t\t\tnumberOfFilesMatched = numberOfFilesMatched + 1\r\n\t\t\t\t\tlet plageObject: SimilaritySubmissions = {} as SimilaritySubmissions\r\n\t\t\t\t\tlet sub1Object: SimilarityLines = {\r\n\t\t\t\t\t\tfile: this.file1NameMap[index1],\r\n\t\t\t\t\t\tlines: Array.from(lineSet1) as Array<number>,\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet sub2Object: SimilarityLines = {\r\n\t\t\t\t\t\tfile: this.file2NameMap[index2],\r\n\t\t\t\t\t\tlines: Array.from(lineSet2) as Array<number>,\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tplageObject.submission1 = sub1Object\r\n\t\t\t\t\tplageObject.submission2 = sub2Object\r\n\r\n\t\t\t\t\tresult[numberOfFilesMatched] = plageObject\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tnumberOfLinesPlagiarised =\r\n\t\t\t\tnumberOfLinesPlagiarised + linesPlagiarisedInFile.size\r\n\t\t})\r\n\r\n\t\t// Calculate results score as a ration of all lines plagiarised to total number of lines present.\r\n\t\tlet score = (numberOfLinesPlagiarised / totalLinesInSubmission1) * 100\r\n\r\n\t\t//if entire file is plagiarised\r\n\t\tif (score>100){\r\n\t\t    score = 100\r\n\t\t}\r\n\r\n\t\tresult.score = score\r\n\t\treturn result\r\n\t}\r\n\r\n\t// helper method to collect all nodes from root nodes.\r\n\tprivate collectNodes(rootNodes: Array<babel.Node>): Array<Array<babel.Node>> {\r\n\t\tlet nodesAcrossAllFiles: Array<Array<babel.Node>> = []\r\n\t\trootNodes.forEach((ele: babel.Node) => {\r\n\t\t\tlet nodesAcrossFile: Array<babel.Node> = []\r\n\t\t\tbabel.traverse(ele, {\r\n\t\t\t\tenter(path: babel.NodePath) {\r\n\t\t\t\t\tnodesAcrossFile.push(path.node)\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\tnodesAcrossAllFiles.push(nodesAcrossFile)\r\n\t\t})\r\n\r\n\t\treturn nodesAcrossAllFiles\r\n\t}\r\n\r\n\t//helper method to check if the required keys exist in the object. \r\n\tprivate checkConditionHelper(node: any): boolean {\r\n\t\tif (\r\n\t\t\t_.has(node, \"body\") ||\r\n\t\t\t_.has(node, \"expression\") ||\r\n\t\t\t_.has(node, \"arguments\") ||\r\n\t\t\t_.has(node, \"declarations\")\r\n\t\t) {\r\n\t\t\t//ignore expression statements and call expressions\r\n\t\t\tif (\r\n\t\t\t\tnode[\"type\"] === \"ExpressionStatement\" ||\r\n\t\t\t\tnode[\"type\"] === \"CallExpression\"\r\n\t\t\t) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t} else return false\r\n\t}\r\n\r\n\t// Helper method to compare two node objects for similarity\r\n\tprivate compareNodes(node1: babel.Node, node2: babel.Node): boolean {\r\n\t\t// properties to ignore while comparing\r\n\t\t\r\n\t\t//if one object is null and other isn't , they are not plagiarised\r\n\t\tif(node1==null && node2!=null || node1!=null && node2==null) return false\r\n\t\t\r\n\t\t// if both objects are null, flag them off as not plagiarised\r\n\t\tif (node1 == null && node2 == null) return true\r\n\r\n\t\tlet ignoredProperties = [\r\n\t\t\t\"loc\",\r\n\t\t\t\"start\",\r\n\t\t\t\"range\",\r\n\t\t\t\"leadingComments\",\r\n\t\t\t\"innerComments\",\r\n\t\t\t\"trailingComments\",\r\n\t\t\t\"extra\",\r\n\t\t\t\"end\",\r\n\t\t\t\"sourceType\",\r\n\t\t\t\"interpreter\",\r\n\t\t\t\"name\",\r\n\t\t]\r\n\r\n\t\t// Logic to check the condition 9 * (5+10) && (5+10) * 9 is plagiarised\r\n\t\tif (\r\n\t\t\tnode1 != null &&\r\n\t\t\tnode2 != null &&\r\n\t\t\tnode1.type === \"BinaryExpression\" &&\r\n\t\t\tnode2.type === \"BinaryExpression\"\r\n\t\t) {\r\n\t\t\treturn (\r\n\t\t\t\t(this.compareNodes(node1.left, node2.left) &&\r\n\t\t\t\t\tthis.compareNodes(node1.right, node2.right)) ||\r\n\t\t\t\t(this.compareNodes(node1.right, node2.left) &&\r\n\t\t\t\t\tthis.compareNodes(node1.left, node2.right))\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// Loop through properties in node 1\r\n\t\tfor (let key in node1) {\r\n\t\t\tif (ignoredProperties.includes(key)) continue\r\n\r\n\t\t\t// Check property exists on both objects\r\n\t\t\tif (node1.hasOwnProperty(key) !== node2.hasOwnProperty(key)) return false\r\n\r\n\t\t\tswitch (typeof node1[key]) {\r\n\t\t\t\t// Deep compare objects\r\n\t\t\t\tcase \"object\":\r\n\t\t\t\t\tif (!this.compareNodes(node1[key], node2[key])) return false\r\n\t\t\t\t\tbreak\r\n\t\t\t\t// Compare values\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (node1[key] != node2[key]) return false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check object 2 for any extra properties\r\n\t\tfor (let key in node2) {\r\n\t\t\tif (ignoredProperties.includes(key)) continue\r\n\t\t\tif (typeof node1[key] == \"undefined\") return false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n}\r\n\r\nexport default JSPlagDetector\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bf0999d02427e32726886aea60f8ede9e45397d9","contentHash":"8b3ff9ab607afe5e01d9e59c1825ea0f9dc847a719746d57a9432901341f38fb"},"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\PlagiarismRunner\\PlagiarismRunner.ts":{"path":"C:\\Users\\deepa\\OneDrive\\Desktop\\Team-28\\plage-detect\\src\\PlagiarismRunner\\PlagiarismRunner.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":6,"column":38},"end":{"line":46,"column":3}},"2":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"3":{"start":{"line":10,"column":8},"end":{"line":10,"column":47}},"4":{"start":{"line":16,"column":4},"end":{"line":44,"column":6}},"5":{"start":{"line":17,"column":29},"end":{"line":17,"column":65}},"6":{"start":{"line":18,"column":28},"end":{"line":18,"column":77}},"7":{"start":{"line":19,"column":28},"end":{"line":19,"column":77}},"8":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"9":{"start":{"line":22,"column":12},"end":{"line":22,"column":47}},"10":{"start":{"line":24,"column":25},"end":{"line":24,"column":72}},"11":{"start":{"line":25,"column":25},"end":{"line":25,"column":72}},"12":{"start":{"line":27,"column":24},"end":{"line":27,"column":49}},"13":{"start":{"line":29,"column":35},"end":{"line":29,"column":63}},"14":{"start":{"line":30,"column":27},"end":{"line":30,"column":51}},"15":{"start":{"line":32,"column":24},"end":{"line":32,"column":49}},"16":{"start":{"line":34,"column":35},"end":{"line":34,"column":63}},"17":{"start":{"line":35,"column":27},"end":{"line":35,"column":51}},"18":{"start":{"line":37,"column":27},"end":{"line":37,"column":109}},"19":{"start":{"line":38,"column":21},"end":{"line":38,"column":42}},"20":{"start":{"line":40,"column":8},"end":{"line":40,"column":50}},"21":{"start":{"line":41,"column":8},"end":{"line":41,"column":50}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":22}},"23":{"start":{"line":45,"column":4},"end":{"line":45,"column":28}},"24":{"start":{"line":47,"column":0},"end":{"line":47,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":50},"end":{"line":46,"column":1}},"line":6},"1":{"name":"PlagiarismRunner","decl":{"start":{"line":8,"column":13},"end":{"line":8,"column":29}},"loc":{"start":{"line":8,"column":64},"end":{"line":11,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":47},"end":{"line":16,"column":48}},"loc":{"start":{"line":16,"column":74},"end":{"line":44,"column":5}},"line":16}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"1":{"loc":{"start":{"line":21,"column":12},"end":{"line":21,"column":68}},"type":"binary-expr","locations":[{"start":{"line":21,"column":12},"end":{"line":21,"column":38}},{"start":{"line":21,"column":42},"end":{"line":21,"column":68}}],"line":21}},"s":{"0":1,"1":1,"2":33,"3":33,"4":1,"5":39,"6":39,"7":39,"8":39,"9":7,"10":32,"11":32,"12":32,"13":32,"14":32,"15":32,"16":32,"17":32,"18":32,"19":32,"20":32,"21":32,"22":32,"23":1,"24":1},"f":{"0":1,"1":33,"2":39},"b":{"0":[7,32],"1":[39,35]},"inputSourceMap":{"version":3,"file":"C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/PlagiarismRunner/PlagiarismRunner.ts","sources":["C:/Users/deepa/OneDrive/Desktop/Team-28/plage-detect/src/PlagiarismRunner/PlagiarismRunner.ts"],"names":[],"mappings":";;AAOA;;GAEG;AACH;IAII,kCAAkC;IAClC,0BAAY,eAAuB,EAAE,eAAuB;QACxD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACH,wCAAa,GAAb,UAAc,eAAiC;QAC3C,IAAM,cAAc,GAAoB,eAAe,CAAC,kBAAkB,EAAE,CAAC;QAE7E,IAAM,aAAa,GAAkB,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACvF,IAAM,aAAa,GAAkB,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEvF,qEAAqE;QACrE,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;SACrC;QAGD,IAAM,UAAU,GAAkB,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAClF,IAAM,UAAU,GAAkB,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAClF,qCAAqC;QACrC,IAAM,SAAS,GAAsB,UAAU,CAAC,YAAY,EAAE,CAAC;QAE/D,+EAA+E;QAC/E,IAAM,oBAAoB,GAAmB,UAAU,CAAC,eAAe,EAAE,CAAC;QAC1E,IAAM,YAAY,GAAkB,UAAU,CAAC,WAAW,EAAE,CAAC;QAE7D,qCAAqC;QACrC,IAAM,SAAS,GAAsB,UAAU,CAAC,YAAY,EAAE,CAAC;QAC/D,+EAA+E;QAC/E,IAAM,oBAAoB,GAAmB,UAAU,CAAC,eAAe,EAAE,CAAC;QAC1E,IAAM,YAAY,GAAkB,UAAU,CAAC,WAAW,EAAE,CAAC;QAE7D,wBAAwB;QACxB,IAAM,YAAY,GAAkB,eAAe,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;QACvH,IAAM,MAAM,GAAe,YAAY,CAAC,MAAM,EAAE,CAAA;QAEhD,sDAAsD;QACtD,MAAM,CAAC,WAAW,GAAG,oBAAoB,CAAA;QAC/C,MAAM,CAAC,WAAW,GAAG,oBAAoB,CAAA;QAEnC,eAAe;QACf,OAAO,MAAM,CAAC;IAElB,CAAC;IACL,uBAAC;AAAD,CAAC,AArDD,IAqDC;AAED,kBAAe,gBAAgB,CAAC","sourcesContent":["import IASTGenerator from \"../ASTGenerator/IASTGenerator\";\r\nimport IDetectorFactory from \"../DetectorFactory/IDetectorFactory\";\r\nimport IFilePathGetter from \"../FilePathGetter/IFilePathGetter\";\r\nimport IPlagDetector from \"../PlagDetector/IPlagDetector\";\r\nimport * as babel from \"@babel/core\";\r\nimport { PlagResult, SubmissionCode, SubmissionMap } from \"./../Types/PlagResultType\";\r\n\r\n/**\r\n *  Class implements runPlagiarism method (Client in Abstract Factory Design pattern)\r\n */\r\nclass PlagiarismRunner {\r\n    private submission1Path: string;\r\n    private submission2Path: string;\r\n\r\n    //Constructor for PlagiarismRunner\r\n    constructor(submission1Path: string, submission2Path: string) {\r\n        this.submission1Path = submission1Path;\r\n        this.submission2Path = submission2Path;\r\n    }\r\n\r\n    /**\r\n     * Method to run run plagiarism based on the IDetectorFactory and return resultant object.\r\n     * @param detectorFactory Factory input of type IDetectorFactory.\r\n     */\r\n    runPlagiarism(detectorFactory: IDetectorFactory): PlagResult {\r\n        const filePathGetter: IFilePathGetter = detectorFactory.makeFilePathGetter();\r\n\r\n        const sub1FilePaths: Array<string> = filePathGetter.getFilePaths(this.submission1Path);\r\n        const sub2FilePaths: Array<string> = filePathGetter.getFilePaths(this.submission2Path);\r\n\r\n        //If one of directory is empty or no files of specific type is found.\r\n        if (sub1FilePaths.length === 0 || sub2FilePaths.length === 0) {\r\n            throw new Error('empty directory')\r\n        }\r\n\r\n       \r\n        const sub1ASTGen: IASTGenerator = detectorFactory.makeASTGenerator(sub1FilePaths);\r\n        const sub2ASTGen: IASTGenerator = detectorFactory.makeASTGenerator(sub2FilePaths);\r\n        //Generate AST nodes for submission1.\r\n        const sub1Nodes: Array<babel.Node> = sub1ASTGen.generateASTs();\r\n\r\n        //Get the file content and get mapped filepaths based on index for submission1.\r\n        const sub1MapFileToContent: SubmissionCode = sub1ASTGen.getFileContents();\r\n        const sub1FileMaps: SubmissionMap = sub1ASTGen.getFileMaps();\r\n\r\n        //Generate AST nodes for submission2.\r\n        const sub2Nodes: Array<babel.Node> = sub2ASTGen.generateASTs();\r\n        //Get the file content and get mapped filepaths based on index for submission2.\r\n        const sub2MapFileToContent: SubmissionCode = sub2ASTGen.getFileContents();\r\n        const sub2FileMaps: SubmissionMap = sub2ASTGen.getFileMaps();\r\n\r\n        //Run plagiarism detect.\r\n        const plagDetector: IPlagDetector = detectorFactory.makePlagDetector(sub1Nodes, sub2Nodes, sub1FileMaps, sub2FileMaps);\r\n        const result: PlagResult = plagDetector.detect()\r\n\r\n        //append the content of files to the resultant object.\r\n        result.submission1 = sub1MapFileToContent\r\n\t\tresult.submission2 = sub2MapFileToContent\r\n\r\n        //Return result\r\n        return result;\r\n\r\n    }\r\n}\r\n\r\nexport default PlagiarismRunner;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"13ab9b9708608a3f7aec7d19967eefb2975992ed","contentHash":"378cdf6923d6df987268736e69f16bbfdac312cd7f7b33cee3105b55f55e4c88"}}